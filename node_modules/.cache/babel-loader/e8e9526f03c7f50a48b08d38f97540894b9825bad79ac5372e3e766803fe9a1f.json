{"ast":null,"code":"var _jsxFileName = \"D:\\\\Anjali\\\\Spotify-Clone\\\\spotify-clone\\\\src\\\\context\\\\PlayerContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useRef, useState } from \"react\";\nimport { songsData } from '../assets/assets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlayerContext = /*#__PURE__*/createContext();\nconst PlayerContextProvider = props => {\n  _s();\n  const audioRef = useRef();\n  const seekBg = useRef();\n  const seekBar = useRef();\n  const [track, setTrack] = useState(songsData[0]);\n  const [playStatus, setPlayStatus] = useState(false);\n  const [time, setTime] = useState({\n    currentTime: {\n      second: 0,\n      minute: 0\n    },\n    totalTime: {\n      second: 0,\n      minute: 0\n    }\n  });\n  const play = () => {\n    audioRef.current.play();\n    setPlayStatus(true);\n  };\n  const pause = () => {\n    audioRef.current.pause();\n    setPlayStatus(false);\n  };\n  const playWithId = async id => {\n    await setTrack(songsData[id]);\n    await audioRef.current.play();\n    setPlayStatus(true);\n  };\n  const previous = async id => {\n    if (track.id > 0) {\n      await setTrack(songsData[track.id - 1]);\n      await audioRef.current.play();\n      setPlayStatus(true);\n    }\n  };\n  const next = async id => {\n    if (track.id < songsData.length - 1) {\n      await setTrack(songsData[track.id + 1]);\n      await audioRef.current.play();\n      setPlayStatus(true);\n    }\n  };\n  const seekSong = async e => {\n    audioRef.current.currentTime = e.NativeEvem;\n  };\n\n  // Use effect to update time\n  useEffect(() => {\n    const updateTime = () => {\n      if (audioRef.current) {\n        const currentTime = audioRef.current.currentTime;\n        const duration = audioRef.current.duration;\n\n        // Set the width of the seek bar as a percentage of the total duration\n        const seekBarWidth = currentTime / duration * 100;\n        seekBar.current.style.width = `${seekBarWidth}%`;\n        setTime({\n          currentTime: {\n            second: Math.floor(currentTime % 60),\n            minute: Math.floor(currentTime / 60)\n          },\n          totalTime: {\n            second: Math.floor(duration % 60),\n            minute: Math.floor(duration / 60)\n          }\n        });\n      }\n    };\n    const intervalId = setInterval(updateTime, 1000);\n    return () => clearInterval(intervalId);\n  }, [audioRef]);\n  const contextValue = {\n    audioRef,\n    seekBg,\n    seekBar,\n    track,\n    setTrack,\n    playStatus,\n    setPlayStatus,\n    time,\n    setTime,\n    play,\n    pause,\n    playWithId,\n    previous,\n    next,\n    seekSong\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(PlayerContextProvider, \"20gs11F0GlwfWgTojvLh5beE6HI=\");\n_c = PlayerContextProvider;\nexport default PlayerContextProvider;\nvar _c;\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useRef","useState","songsData","jsxDEV","_jsxDEV","PlayerContext","PlayerContextProvider","props","_s","audioRef","seekBg","seekBar","track","setTrack","playStatus","setPlayStatus","time","setTime","currentTime","second","minute","totalTime","play","current","pause","playWithId","id","previous","next","length","seekSong","e","NativeEvem","updateTime","duration","seekBarWidth","style","width","Math","floor","intervalId","setInterval","clearInterval","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Anjali/Spotify-Clone/spotify-clone/src/context/PlayerContext.jsx"],"sourcesContent":["import { createContext, useEffect, useRef, useState } from \"react\";\r\nimport { songsData } from '../assets/assets'\r\n\r\nexport const PlayerContext = createContext();\r\n\r\nconst PlayerContextProvider = (props) => {\r\n    const audioRef = useRef();\r\n    const seekBg = useRef();\r\n    const seekBar = useRef();\r\n    \r\n    const [track, setTrack] = useState(songsData[0]);\r\n    const [playStatus, setPlayStatus] = useState(false);\r\n    const [time, setTime] = useState({\r\n        currentTime: { second: 0, minute: 0 },\r\n        totalTime: { second: 0, minute: 0 }\r\n    });\r\n    \r\n    const play = () => {\r\n        audioRef.current.play();\r\n        setPlayStatus(true);\r\n    }\r\n\r\n    const pause = () => {\r\n        audioRef.current.pause();\r\n        setPlayStatus(false);\r\n    }\r\n\r\n    const playWithId = async (id) => {\r\n      await setTrack(songsData[id]);\r\n      await audioRef.current.play();\r\n      setPlayStatus(true);\r\n    }\r\n\r\n    const previous = async (id) => {\r\n        if (track.id>0) {\r\n            await setTrack(songsData[track.id-1]);\r\n            await audioRef.current.play();\r\n            setPlayStatus(true);\r\n        }\r\n    }\r\n\r\n    const next = async (id) => {\r\n        if (track.id<songsData.length-1) {\r\n            await setTrack(songsData[track.id+1]);\r\n            await audioRef.current.play();\r\n            setPlayStatus(true);\r\n        }\r\n    }\r\n\r\n    const seekSong = async (e) => {\r\n        audioRef.current.currentTime = ((e.NativeEvem))\r\n    }\r\n\r\n    // Use effect to update time\r\n    useEffect(() => {\r\n        const updateTime = () => {\r\n            if (audioRef.current) {\r\n                const currentTime = audioRef.current.currentTime;\r\n                const duration = audioRef.current.duration;\r\n\r\n                // Set the width of the seek bar as a percentage of the total duration\r\n                const seekBarWidth = (currentTime / duration) * 100;\r\n                seekBar.current.style.width = `${seekBarWidth}%`;\r\n\r\n                setTime({\r\n                    currentTime: {\r\n                        second: Math.floor(currentTime % 60),\r\n                        minute: Math.floor(currentTime / 60),\r\n                    },\r\n                    totalTime: {\r\n                        second: Math.floor(duration % 60),\r\n                        minute: Math.floor(duration / 60),\r\n                    },\r\n                });\r\n            }\r\n        };\r\n\r\n        const intervalId = setInterval(updateTime, 1000);\r\n        return () => clearInterval(intervalId);\r\n    }, [audioRef]);\r\n\r\n    const contextValue = {\r\n        audioRef,\r\n        seekBg,\r\n        seekBar,\r\n        track,setTrack,\r\n        playStatus,setPlayStatus,\r\n        time,setTime,\r\n        play,pause,\r\n        playWithId,\r\n        previous,next,\r\n        seekSong\r\n    };\r\n\r\n    return (\r\n        <PlayerContext.Provider value={contextValue}>\r\n            {props.children}\r\n        </PlayerContext.Provider>\r\n    );\r\n};\r\n\r\nexport default PlayerContextProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}