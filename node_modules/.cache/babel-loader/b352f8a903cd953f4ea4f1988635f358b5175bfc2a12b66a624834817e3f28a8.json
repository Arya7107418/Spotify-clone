{"ast":null,"code":"var _jsxFileName = \"D:\\\\Anjali\\\\Spotify-Clone\\\\spotify-clone\\\\src\\\\context\\\\PlayerContext.jsx\",\n  _s2 = $RefreshSig$();\nimport { createContext, useEffect, useRef, useState } from \"react\";\nimport { songsData } from '../assets/assets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlayerContext = /*#__PURE__*/createContext();\nconst PlayerContextProvider = props => {\n  _s2();\n  var _s = $RefreshSig$();\n  const audioRef = useRef();\n  const seekBg = useRef();\n  const seekBar = useRef();\n  const [track, setTrack] = useState(songsData[0]);\n  const [playStatus, setPlayStatus] = useState(false);\n  const [time, setTime] = useState({\n    currentTime: {\n      second: 0,\n      minute: 0\n    },\n    totalTime: {\n      second: 0,\n      minute: 0\n    }\n  });\n  const play = () => {\n    audioRef.current.play();\n    setPlayStatus(true);\n  };\n  const pause = () => {\n    audioRef.current.pause();\n    setPlayStatus(false);\n  };\n  const playWithId = async id => {\n    await setTrack(songsData[id]);\n    await audioRef.current.play();\n    setPlayStatus(true);\n  };\n  const previous = async id => {\n    _s();\n    return (\n      // Use effect to update time\n      useEffect(() => {\n        const updateTime = () => {\n          if (audioRef.current) {\n            const currentTime = audioRef.current.currentTime;\n            const duration = audioRef.current.duration;\n\n            // Set the width of the seek bar as a percentage of the total duration\n            const seekBarWidth = currentTime / duration * 100;\n            seekBar.current.style.width = `${seekBarWidth}%`;\n            setTime({\n              currentTime: {\n                second: Math.floor(currentTime % 60),\n                minute: Math.floor(currentTime / 60)\n              },\n              totalTime: {\n                second: Math.floor(duration % 60),\n                minute: Math.floor(duration / 60)\n              }\n            });\n          }\n        };\n        const intervalId = setInterval(updateTime, 1000);\n        return () => clearInterval(intervalId);\n      }, [audioRef])\n    );\n  };\n  _s(previous, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  const contextValue = {\n    audioRef,\n    seekBg,\n    seekBar,\n    track,\n    setTrack,\n    playStatus,\n    setPlayStatus,\n    time,\n    setTime,\n    play,\n    pause,\n    playWithId\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s2(PlayerContextProvider, \"t0eblWhO88QtTCyF8/P365R3AxA=\");\n_c = PlayerContextProvider;\nexport default PlayerContextProvider;\nvar _c;\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useRef","useState","songsData","jsxDEV","_jsxDEV","PlayerContext","PlayerContextProvider","props","_s2","_s","$RefreshSig$","audioRef","seekBg","seekBar","track","setTrack","playStatus","setPlayStatus","time","setTime","currentTime","second","minute","totalTime","play","current","pause","playWithId","id","previous","updateTime","duration","seekBarWidth","style","width","Math","floor","intervalId","setInterval","clearInterval","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Anjali/Spotify-Clone/spotify-clone/src/context/PlayerContext.jsx"],"sourcesContent":["import { createContext, useEffect, useRef, useState } from \"react\";\r\nimport { songsData } from '../assets/assets'\r\n\r\nexport const PlayerContext = createContext();\r\n\r\nconst PlayerContextProvider = (props) => {\r\n    const audioRef = useRef();\r\n    const seekBg = useRef();\r\n    const seekBar = useRef();\r\n    \r\n    const [track, setTrack] = useState(songsData[0]);\r\n    const [playStatus, setPlayStatus] = useState(false);\r\n    const [time, setTime] = useState({\r\n        currentTime: { second: 0, minute: 0 },\r\n        totalTime: { second: 0, minute: 0 }\r\n    });\r\n    \r\n    const play = () => {\r\n        audioRef.current.play();\r\n        setPlayStatus(true);\r\n    }\r\n\r\n    const pause = () => {\r\n        audioRef.current.pause();\r\n        setPlayStatus(false);\r\n    }\r\n\r\n    const playWithId = async (id) => {\r\n      await setTrack(songsData[id]);\r\n      await audioRef.current.play();\r\n      setPlayStatus(true);\r\n    }\r\n\r\n    const previous = async (id) => \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Use effect to update time\r\n    useEffect(() => {\r\n        const updateTime = () => {\r\n            if (audioRef.current) {\r\n                const currentTime = audioRef.current.currentTime;\r\n                const duration = audioRef.current.duration;\r\n\r\n                // Set the width of the seek bar as a percentage of the total duration\r\n                const seekBarWidth = (currentTime / duration) * 100;\r\n                seekBar.current.style.width = `${seekBarWidth}%`;\r\n\r\n                setTime({\r\n                    currentTime: {\r\n                        second: Math.floor(currentTime % 60),\r\n                        minute: Math.floor(currentTime / 60),\r\n                    },\r\n                    totalTime: {\r\n                        second: Math.floor(duration % 60),\r\n                        minute: Math.floor(duration / 60),\r\n                    },\r\n                });\r\n            }\r\n        };\r\n\r\n        const intervalId = setInterval(updateTime, 1000);\r\n        return () => clearInterval(intervalId);\r\n    }, [audioRef]);\r\n\r\n    const contextValue = {\r\n        audioRef,\r\n        seekBg,\r\n        seekBar,\r\n        track,\r\n        setTrack,\r\n        playStatus,\r\n        setPlayStatus,\r\n        time,\r\n        setTime,\r\n        play,\r\n        pause,\r\n        playWithId\r\n    };\r\n\r\n    return (\r\n        <PlayerContext.Provider value={contextValue}>\r\n            {props.children}\r\n        </PlayerContext.Provider>\r\n    );\r\n};\r\n\r\nexport default PlayerContextProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}