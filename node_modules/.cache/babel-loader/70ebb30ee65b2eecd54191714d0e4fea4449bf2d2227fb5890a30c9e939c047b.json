{"ast":null,"code":"var _jsxFileName = \"D:\\\\Anjali\\\\Spotify-Clone\\\\spotify-clone\\\\src\\\\context\\\\PlayerContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useRef, useState } from \"react\";\nimport { songsData } from \"../assets/assets\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PlayerContext = /*#__PURE__*/createContext();\nconst PlayerContextProvider = props => {\n  _s();\n  const audioRef = useRef();\n  const seekBg = useRef();\n  const seekBar = useRef();\n  const [track, setTrack] = useState(songsData[0]);\n  const [playStatus, setPlayStatus] = useState(false);\n  const [time, setTime] = useState({\n    currentTime: {\n      second: 0,\n      minute: 0\n    },\n    totalTime: {\n      second: 0,\n      minute: 0\n    }\n  });\n  const play = () => {\n    audioRef.current.play();\n    setPlayStatus(true);\n  };\n  const pause = () => {\n    audioRef.current.pause();\n    setPlayStatus(false);\n  };\n\n  // Function to update the current time and seek bar width\n  const updateTime = () => {\n    if (audioRef.current) {\n      const currentTime = audioRef.current.currentTime;\n      const duration = audioRef.current.duration;\n\n      // Set the width of the seek bar as a percentage of the total duration\n      const seekBarWidth = currentTime / duration * 100;\n      seekBar.current.style.width = `${seekBarWidth}%`;\n      setTime({\n        currentTime: {\n          second: Math.floor(currentTime % 60),\n          minute: Math.floor(currentTime / 60)\n        },\n        totalTime: {\n          second: Math.floor(duration % 60),\n          minute: Math.floor(duration / 60)\n        }\n      });\n    }\n  };\n  useEffect(() => {\n    const updateInterval = setInterval(updateTime, 1000);\n\n    // Cleanup on unmount\n    return () => clearInterval(updateInterval);\n  }, [audioRef]);\n\n  // Handle seeking\n  const handleSeek = event => {\n    const seekWidth = seekBg.current.clientWidth;\n    const offsetX = event.nativeEvent.offsetX;\n    const duration = audioRef.current.duration;\n    audioRef.current.currentTime = offsetX / seekWidth * duration;\n    updateTime(); // Update time display and seek bar width\n  };\n  const contextValue = {\n    audioRef,\n    seekBg,\n    seekBar,\n    track,\n    setTrack,\n    playStatus,\n    setPlayStatus,\n    time,\n    play,\n    pause,\n    handleSeek\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: contextValue,\n    children: [props.children, /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: track.file,\n      preload: \"auto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(PlayerContextProvider, \"EqRuXOV1ZptNuS/TUVFagaga2/c=\");\n_c = PlayerContextProvider;\nexport default PlayerContextProvider;\nvar _c;\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useRef","useState","songsData","jsxDEV","_jsxDEV","PlayerContext","PlayerContextProvider","props","_s","audioRef","seekBg","seekBar","track","setTrack","playStatus","setPlayStatus","time","setTime","currentTime","second","minute","totalTime","play","current","pause","updateTime","duration","seekBarWidth","style","width","Math","floor","updateInterval","setInterval","clearInterval","handleSeek","event","seekWidth","clientWidth","offsetX","nativeEvent","contextValue","Provider","value","children","ref","src","file","preload","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Anjali/Spotify-Clone/spotify-clone/src/context/PlayerContext.jsx"],"sourcesContent":["import { createContext, useEffect, useRef, useState } from \"react\";\r\nimport { songsData } from \"../assets/assets\";\r\n\r\nexport const PlayerContext = createContext();\r\n\r\nconst PlayerContextProvider = (props) => {\r\n    const audioRef = useRef();\r\n    const seekBg = useRef();\r\n    const seekBar = useRef();\r\n\r\n    const [track, setTrack] = useState(songsData[0]);\r\n    const [playStatus, setPlayStatus] = useState(false);\r\n    const [time, setTime] = useState({\r\n        currentTime: {\r\n            second: 0,\r\n            minute: 0\r\n        },\r\n        totalTime: {\r\n            second: 0,\r\n            minute: 0\r\n        }\r\n    });\r\n\r\n    const play = () => {\r\n        audioRef.current.play();\r\n        setPlayStatus(true);\r\n    };\r\n\r\n    const pause = () => {\r\n        audioRef.current.pause();\r\n        setPlayStatus(false);\r\n    };\r\n\r\n    // Function to update the current time and seek bar width\r\n    const updateTime = () => {\r\n        if (audioRef.current) {\r\n            const currentTime = audioRef.current.currentTime;\r\n            const duration = audioRef.current.duration;\r\n\r\n            // Set the width of the seek bar as a percentage of the total duration\r\n            const seekBarWidth = (currentTime / duration) * 100;\r\n            seekBar.current.style.width = `${seekBarWidth}%`;\r\n\r\n            setTime({\r\n                currentTime: {\r\n                    second: Math.floor(currentTime % 60),\r\n                    minute: Math.floor(currentTime / 60),\r\n                },\r\n                totalTime: {\r\n                    second: Math.floor(duration % 60),\r\n                    minute: Math.floor(duration / 60),\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const updateInterval = setInterval(updateTime, 1000);\r\n        \r\n        // Cleanup on unmount\r\n        return () => clearInterval(updateInterval);\r\n    }, [audioRef]);\r\n\r\n    // Handle seeking\r\n    const handleSeek = (event) => {\r\n        const seekWidth = seekBg.current.clientWidth;\r\n        const offsetX = event.nativeEvent.offsetX;\r\n        const duration = audioRef.current.duration;\r\n\r\n        audioRef.current.currentTime = (offsetX / seekWidth) * duration;\r\n        updateTime(); // Update time display and seek bar width\r\n    };\r\n\r\n    const contextValue = {\r\n        audioRef,\r\n        seekBg,\r\n        seekBar,\r\n        track,\r\n        setTrack,\r\n        playStatus,\r\n        setPlayStatus,\r\n        time,\r\n        play,\r\n        pause,\r\n        handleSeek,\r\n\r\n\r\n        \r\n    };\r\n\r\n    return (\r\n        <PlayerContext.Provider value={contextValue}>\r\n            {props.children}\r\n            <audio ref={audioRef} src={track.file} preload=\"auto\" />\r\n        </PlayerContext.Provider>\r\n    );\r\n};\r\n\r\nexport default PlayerContextProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}